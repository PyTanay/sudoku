[{"E:\\practice\\sudoku\\src\\index.js":"1","E:\\practice\\sudoku\\src\\reportWebVitals.js":"2","E:\\practice\\sudoku\\src\\App.js":"3","E:\\practice\\sudoku\\src\\components\\AllNumSel.jsx":"4","E:\\practice\\sudoku\\src\\components\\Utility.jsx":"5","E:\\practice\\sudoku\\src\\components\\WholeGrid.jsx":"6","E:\\practice\\sudoku\\src\\components\\OneRow.jsx":"7","E:\\practice\\sudoku\\src\\components\\Solve.jsx":"8","E:\\practice\\sudoku\\src\\components\\NumberSelector.jsx":"9","E:\\practice\\sudoku\\src\\components\\SingleBox.jsx":"10"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":3132,"mtime":1611906991731,"results":"14","hashOfConfig":"12"},{"size":777,"mtime":1611723380203,"results":"15","hashOfConfig":"12"},{"size":966,"mtime":1611554878075,"results":"16","hashOfConfig":"12"},{"size":4185,"mtime":1611554878076,"results":"17","hashOfConfig":"12"},{"size":629,"mtime":1611379896038,"results":"18","hashOfConfig":"12"},{"size":6685,"mtime":1611921734897,"results":"19","hashOfConfig":"12"},{"size":1226,"mtime":1611727168029,"results":"20","hashOfConfig":"12"},{"size":3798,"mtime":1611906991734,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1du8nig",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},"E:\\practice\\sudoku\\src\\index.js",[],["45","46"],"E:\\practice\\sudoku\\src\\reportWebVitals.js",[],"E:\\practice\\sudoku\\src\\App.js",[],"E:\\practice\\sudoku\\src\\components\\AllNumSel.jsx",[],"E:\\practice\\sudoku\\src\\components\\Utility.jsx",[],"E:\\practice\\sudoku\\src\\components\\WholeGrid.jsx",["47"],"import React,{useContext,useEffect} from 'react'\r\nimport OneRow from './OneRow'\r\nimport './wholeGrid.css'\r\nimport {AppContext} from '../App'\r\n\r\nfunction WholeGrid() {\r\n    const {selected,setSelected,value,setValue,initialValue} = useContext(AppContext)\r\n    useEffect(() => {\r\n        const changeValue=(e)=>{\r\n            if(selected.length!==0 && selected[0]!==undefined){\r\n                if(/[0-9]/.test(e.key)){\r\n                    var temp=JSON.parse(JSON.stringify(value)) //this is necessary since we have 2d array and deep copy is needed\r\n                    temp[selected[0]][selected[1]]=e.key\r\n                    setValue(temp)\r\n                }\r\n                const tempArr=['ArrowUp','ArrowLeft','ArrowDown','ArrowRight']\r\n                if(tempArr.includes(e.key)){\r\n                    e.preventDefault()\r\n                    switch (e.key) {\r\n                        case \"ArrowUp\":\r\n                            var uptemp=1;\r\n                            if(selected[0]!==0){\r\n                                while (initialValue[selected[0]-uptemp][selected[1]]!==null) {\r\n                                    (selected[0]-uptemp===0)?uptemp=0:uptemp++;\r\n                                }\r\n                            }else{\r\n                                uptemp=0;\r\n                            }\r\n                            selected[0]!==0 && setSelected([selected[0]-uptemp,selected[1]])\r\n                            break;\r\n                        case \"ArrowLeft\":\r\n                            var lefttemp=1;\r\n                            if(selected[1]!==0){\r\n                                while (initialValue[selected[0]][selected[1]-lefttemp]!==null) {\r\n                                    (selected[1]-lefttemp===0) ? lefttemp=0 : lefttemp++\r\n                                }\r\n                            }else{\r\n                                lefttemp=0;\r\n                            }\r\n                            selected[1]!==0 && setSelected([selected[0],selected[1]-lefttemp])\r\n                            break;\r\n                        case \"ArrowDown\":\r\n                            var downtemp=1;\r\n                            if(selected[0]!==8){\r\n                                while (initialValue[selected[0]+downtemp][selected[1]]!==null) {\r\n                                    (selected[0]+downtemp===8) ? downtemp=0 : downtemp++\r\n                                }\r\n                            }else{\r\n                                downtemp=0;\r\n                            }\r\n                            selected[0]!==8 && setSelected([selected[0]+downtemp,selected[1]])\r\n                            break;\r\n                        case \"ArrowRight\":\r\n                            var righttemp=1;\r\n                            if(selected[1]!==8){\r\n                                while (initialValue[selected[0]][selected[1]+righttemp]!==null) {\r\n                                    (selected[1]+righttemp===8)?righttemp=0:righttemp++;\r\n                                }\r\n                            }else{\r\n                                righttemp=0;\r\n                            }\r\n                            selected[1]!==8 && setSelected([selected[0],selected[1]+righttemp])\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n                if(e.key===\"Delete\"){\r\n                    var temp1=value\r\n                    temp1[selected[0]][selected[1]]=null\r\n                    setValue([...temp1])\r\n                }\r\n                if(e.key===\"Escape\"){\r\n                    setSelected([])\r\n                }\r\n            }\r\n        }\r\n        document.addEventListener(\"keydown\",changeValue)\r\n        return ()=>{\r\n            document.removeEventListener(\"keydown\",changeValue)\r\n        }\r\n    },[selected])\r\n\r\n    return (\r\n        <div className=\"wholeGrid\">\r\n            {[...Array(9)].map((x,index)=>(index===2||index===5)?<React.Fragment key={index}><OneRow row={index}  /><div className=\"hLine\"></div></React.Fragment>:<OneRow key={index} row={index}  />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WholeGrid\r\n","E:\\practice\\sudoku\\src\\components\\OneRow.jsx",[],"E:\\practice\\sudoku\\src\\components\\Solve.jsx",["48","49","50","51"],"E:\\practice\\sudoku\\src\\components\\NumberSelector.jsx",[],"E:\\practice\\sudoku\\src\\components\\SingleBox.jsx",["52"],"import React,{useState,useContext,useEffect, useRef} from 'react'\r\nimport {AppContext} from '../App'\r\nimport './singleBox.css'\r\n\r\nfunction SingleBox(props) {\r\n    const {selected,setSelected,value,getCol,getBlock,getBlockAddress,initialValue,path,setPath}= useContext(AppContext)\r\n    const [address] = useState([props.row,props.col])\r\n    var classList=[\"singleBox\"]\r\n    const pervValueRef=useRef();\r\n    useEffect(() => {\r\n        pervValueRef.current=value\r\n    })\r\n    const prevValue=pervValueRef.current;\r\n    useEffect(() => {\r\n        if(prevValue!==undefined){\r\n            const currVal=value[props.row][props.col]\r\n            const prevVal=prevValue[props.row][props.col]\r\n            if(currVal!==prevVal && initialValue[props.row][props.col]===null){\r\n                const data={row:props.row,col:props.col,currVal,prevVal}\r\n                const tempPath=JSON.parse(JSON.stringify(path))\r\n                tempPath.push(data)\r\n                setPath(tempPath)\r\n                // console.log(`Address ${props.row},${props.col} changed from ${prevVal} to ${currVal}`)\r\n            }\r\n        }\r\n    }, [value])\r\n    //this is for original data - that can not be changed\r\n    if(initialValue.length>0){\r\n        if(initialValue[address[0]][address[1]]!==null){\r\n            // console.log(initialValue[address[0]][address[1]],address)\r\n            classList.push(\"disabledBox\")\r\n        }\r\n    }\r\n    //this adds class to display selected number\r\n    if(selected.toString()===address.toString() && !classList.includes(\"selectedBox\")){\r\n        classList.push(\"selectedBox\")\r\n    }else{\r\n        classList=classList.filter(elem=>elem!==\"selectedBox\")\r\n    }\r\n\r\n    //this adds class to display similar cells\r\n    if(value[address[0]][address[1]]!==null && selected[0]!==undefined){\r\n        if(value[address[0]][address[1]]===value[selected[0]][selected[1]] && address.toString()!==selected.toString()){\r\n            classList.push(\"similarBox\")\r\n        }else{\r\n            classList=classList.filter(elem=>elem!==\"similarBox\")\r\n        }\r\n    }\r\n    //this is for validation and adds class to invalid cells\r\n    //row test\r\n    if(selected[0]!==undefined && value[selected[0]][selected[1]]!==null && address[0]===selected[0] && address[1]!==selected[1]){\r\n        if(value[address[0]].filter(x=>x===value[selected[0]][selected[1]]).length>1 && value[address[0]][address[1]]===value[selected[0]][selected[1]]){\r\n            classList.push(\"dangerBox\")\r\n        }else{\r\n            classList=classList.filter(elem=>elem!==\"dangerBox\")\r\n        }\r\n    }\r\n    //column test\r\n    if(selected[0]!==undefined && value[selected[0]][selected[1]]!==null && address[1]===selected[1] && address[0]!==selected[0]){\r\n        if(getCol(value,selected[1]).filter(x=>x===value[selected[0]][selected[1]]).length>1 && value[address[0]][address[1]]===value[selected[0]][selected[1]]){\r\n            classList.push(\"dangerBox\")\r\n        }else{\r\n            classList=classList.filter(elem=>elem!==\"dangerBox\")\r\n        }\r\n    }\r\n    //block test\r\n    if(selected[0]!==undefined && value[selected[0]][selected[1]]!==null && address[0]!==selected[0] && getBlockAddress(address).toString()===getBlockAddress(selected).toString()){\r\n        if(getBlock(value,getBlockAddress(address)).filter(x=>x===value[address[0]][address[1]]).length>1 && value[address[0]][address[1]]===value[selected[0]][selected[1]]){\r\n            classList.push(\"dangerBox\")\r\n        }else{\r\n            classList=classList.filter(elem=>elem!==\"dangerBox\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div onClick={()=>setSelected(address)} className={classList.join(\" \")}>\r\n            <div className=\"text1\">\r\n                {value[address[0]][address[1]]}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleBox\r\n",{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":82,"column":7,"nodeType":"59","endLine":82,"endColumn":17,"suggestions":"60"},{"ruleId":"61","severity":1,"message":"62","line":6,"column":18,"nodeType":"63","messageId":"64","endLine":6,"endColumn":30},{"ruleId":"61","severity":1,"message":"65","line":9,"column":9,"nodeType":"63","messageId":"64","endLine":9,"endColumn":15},{"ruleId":"57","severity":1,"message":"66","line":23,"column":5,"nodeType":"59","endLine":23,"endColumn":7,"suggestions":"67"},{"ruleId":"57","severity":1,"message":"68","line":44,"column":6,"nodeType":"59","endLine":44,"endColumn":16,"suggestions":"69"},{"ruleId":"57","severity":1,"message":"70","line":26,"column":8,"nodeType":"59","endLine":26,"endColumn":15,"suggestions":"71"},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'initialValue', 'setSelected', 'setValue', and 'value'. Either include them or remove the dependency array.","ArrayExpression",["74"],"no-unused-vars","'initialValue' is assigned a value but never used.","Identifier","unusedVar","'strArr' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'solveSudoku'. Either include it or remove the dependency array.",["75"],"React Hook useEffect has missing dependencies: 'counter', 'methodA', 'setSolution', and 'solving'. Either include them or remove the dependency array. You can also do a functional update 'setCounter(c => ...)' if you only need 'counter' in the 'setCounter' call.",["76"],"React Hook useEffect has missing dependencies: 'initialValue', 'path', 'prevValue', 'props.col', 'props.row', and 'setPath'. Either include them or remove the dependency array.",["77"],"no-global-assign","no-unsafe-negation",{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"Update the dependencies array to be: [initialValue, selected, setSelected, setValue, value]",{"range":"86","text":"87"},"Update the dependencies array to be: [solveSudoku]",{"range":"88","text":"89"},"Update the dependencies array to be: [counter, methodA, setSolution, solution, solving]",{"range":"90","text":"91"},"Update the dependencies array to be: [initialValue, path, prevValue, props.col, props.row, setPath, value]",{"range":"92","text":"93"},[3863,3873],"[initialValue, selected, setSelected, setValue, value]",[1004,1006],"[solveSudoku]",[1680,1690],"[counter, methodA, setSolution, solution, solving]",[1118,1125],"[initialValue, path, prevValue, props.col, props.row, setPath, value]"]