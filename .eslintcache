[{"C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\index.js":"1","C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\reportWebVitals.js":"2","C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\App.js":"3","C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\components\\AllNumSel.jsx":"4","C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\components\\WholeGrid.jsx":"5","C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\components\\TimerBox.jsx":"6","C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\components\\NumberSelector.jsx":"7","C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\components\\OneRow.jsx":"8","C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\components\\Utility.jsx":"9","C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\components\\SingleBox.jsx":"10","C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\components\\Solve.jsx":"11","C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\components\\HomePage.jsx":"12","C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\components\\Main.jsx":"13","C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\components\\DropDown.jsx":"14"},{"size":517,"mtime":1611147647139,"results":"15","hashOfConfig":"16"},{"size":375,"mtime":1611147647140,"results":"17","hashOfConfig":"16"},{"size":3223,"mtime":1612094373951,"results":"18","hashOfConfig":"16"},{"size":832,"mtime":1611949603251,"results":"19","hashOfConfig":"16"},{"size":4185,"mtime":1611946768887,"results":"20","hashOfConfig":"16"},{"size":1897,"mtime":1612019661763,"results":"21","hashOfConfig":"16"},{"size":1350,"mtime":1612023119232,"results":"22","hashOfConfig":"16"},{"size":629,"mtime":1611324810330,"results":"23","hashOfConfig":"16"},{"size":1062,"mtime":1612093741119,"results":"24","hashOfConfig":"16"},{"size":4595,"mtime":1612028124830,"results":"25","hashOfConfig":"16"},{"size":8406,"mtime":1612020338088,"results":"26","hashOfConfig":"16"},{"size":1873,"mtime":1612098115130,"results":"27","hashOfConfig":"16"},{"size":1904,"mtime":1612097997839,"results":"28","hashOfConfig":"16"},{"size":1259,"mtime":1612094283857,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1mi9bpo",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\index.js",[],["63","64"],"C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\reportWebVitals.js",[],"C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\App.js",[],"C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\components\\AllNumSel.jsx",[],"C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\components\\WholeGrid.jsx",["65"],"import React,{useContext,useEffect} from 'react'\r\nimport OneRow from './OneRow'\r\nimport './wholeGrid.css'\r\nimport {AppContext} from '../App'\r\n\r\nfunction WholeGrid() {\r\n    const {selected,setSelected,value,setValue,initialValue} = useContext(AppContext)\r\n    useEffect(() => {\r\n        const changeValue=(e)=>{\r\n            if(selected.length!==0 && selected[0]!==undefined){\r\n                if(/[1-9]/.test(e.key)){\r\n                    var temp=JSON.parse(JSON.stringify(value)) //this is necessary since we have 2d array and deep copy is needed\r\n                    temp[selected[0]][selected[1]]=e.key\r\n                    setValue(temp)\r\n                }\r\n                const tempArr=['ArrowUp','ArrowLeft','ArrowDown','ArrowRight']\r\n                if(tempArr.includes(e.key)){\r\n                    e.preventDefault()\r\n                    switch (e.key) {\r\n                        case \"ArrowUp\":\r\n                            var uptemp=1;\r\n                            if(selected[0]!==0){\r\n                                while (initialValue[selected[0]-uptemp][selected[1]]!==null) {\r\n                                    (selected[0]-uptemp===0)?uptemp=0:uptemp++;\r\n                                }\r\n                            }else{\r\n                                uptemp=0;\r\n                            }\r\n                            selected[0]!==0 && setSelected([selected[0]-uptemp,selected[1]])\r\n                            break;\r\n                        case \"ArrowLeft\":\r\n                            var lefttemp=1;\r\n                            if(selected[1]!==0){\r\n                                while (initialValue[selected[0]][selected[1]-lefttemp]!==null) {\r\n                                    (selected[1]-lefttemp===0) ? lefttemp=0 : lefttemp++\r\n                                }\r\n                            }else{\r\n                                lefttemp=0;\r\n                            }\r\n                            selected[1]!==0 && setSelected([selected[0],selected[1]-lefttemp])\r\n                            break;\r\n                        case \"ArrowDown\":\r\n                            var downtemp=1;\r\n                            if(selected[0]!==8){\r\n                                while (initialValue[selected[0]+downtemp][selected[1]]!==null) {\r\n                                    (selected[0]+downtemp===8) ? downtemp=0 : downtemp++\r\n                                }\r\n                            }else{\r\n                                downtemp=0;\r\n                            }\r\n                            selected[0]!==8 && setSelected([selected[0]+downtemp,selected[1]])\r\n                            break;\r\n                        case \"ArrowRight\":\r\n                            var righttemp=1;\r\n                            if(selected[1]!==8){\r\n                                while (initialValue[selected[0]][selected[1]+righttemp]!==null) {\r\n                                    (selected[1]+righttemp===8)?righttemp=0:righttemp++;\r\n                                }\r\n                            }else{\r\n                                righttemp=0;\r\n                            }\r\n                            selected[1]!==8 && setSelected([selected[0],selected[1]+righttemp])\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n                if(e.key===\"Delete\"){\r\n                    var temp1=value\r\n                    temp1[selected[0]][selected[1]]=null\r\n                    setValue([...temp1])\r\n                }\r\n                if(e.key===\"Escape\"){\r\n                    setSelected([])\r\n                }\r\n            }\r\n        }\r\n        document.addEventListener(\"keydown\",changeValue)\r\n        return ()=>{\r\n            document.removeEventListener(\"keydown\",changeValue)\r\n        }\r\n    },[selected])\r\n\r\n    return (\r\n        <div className=\"wholeGrid\">\r\n            {[...Array(9)].map((x,index)=>(index===2||index===5)?<React.Fragment key={index}><OneRow row={index}  /><div className=\"hLine\"></div></React.Fragment>:<OneRow key={index} row={index}  />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WholeGrid\r\n","C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\components\\TimerBox.jsx",["66","67"],"import React,{useContext,useEffect, useRef} from 'react'\r\nimport './timerBox.css'\r\nimport Timer from  'react-compound-timer'\r\nimport {AppContext} from '../App'\r\n\r\nfunction TimerBox() {\r\n    const {timerControls, timeValue} = useContext(AppContext)\r\n    return (\r\n        <div className=\"pillBox\">\r\n            <Timer>\r\n                {({start, resume, pause, stop, reset, timerState})=>{\r\n                    if(timerControls.current.start===undefined){\r\n                        timerControls.current={start, resume, pause, stop, reset, timerState}\r\n                    }\r\n                    return <>\r\n                        Timer :\r\n                        <Timer.Hours formatValue={value =>{\r\n                            if(value!==0){\r\n                                timeValue.current.hour=value\r\n                                return ` ${value} h`\r\n                            }else{\r\n                                return null\r\n                            }\r\n                        }} />\r\n                        <Timer.Minutes formatValue={value =>{\r\n                            if(value!==0){\r\n                                timeValue.current.min=value\r\n                                return ` ${value} m`\r\n                            }else{\r\n                                return null\r\n                            }\r\n                        }} />\r\n                        <Timer.Seconds formatValue={value =>{\r\n                            timeValue.current.sec=value\r\n                            return ` ${value} s`\r\n                        }} />\r\n                        {/* <Timer.Minutes formatValue={value =>value!==0 ?` ${value} m`:null} /> */}\r\n                        {/* <Timer.Seconds formatValue={value => ` ${value} s`} /> */}\r\n                    </>\r\n                }}\r\n                \r\n            </Timer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TimerBox\r\n","C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\components\\NumberSelector.jsx",[],"C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\components\\OneRow.jsx",[],"C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\components\\Utility.jsx",[],"C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\components\\SingleBox.jsx",["68"],"import React, { useState, useContext, useEffect, useRef } from \"react\";\r\nimport { AppContext } from \"../App\";\r\nimport \"./singleBox.css\";\r\n\r\nfunction SingleBox(props) {\r\n  const { selected, setSelected, value, getCol, getBlock, getBlockAddress, initialValue, path, setPath, solution,displayError,highlight } = useContext(\r\n    AppContext\r\n  );\r\n  const [address] = useState([props.row, props.col]);\r\n  const [check, setCheck] = useState(displayError)\r\n  var classList = [\"singleBox\"];\r\n  const pervValueRef = useRef();\r\n  useEffect(() => {\r\n    pervValueRef.current = value;\r\n  });\r\n  useEffect(() => {\r\n      setCheck(displayError)\r\n  }, [displayError])\r\n  const prevValue = pervValueRef.current;\r\n  useEffect(() => {\r\n    if (prevValue !== undefined) {\r\n      const currVal = value[props.row][props.col];\r\n      const prevVal = prevValue[props.row][props.col];\r\n      if (currVal !== prevVal && initialValue[props.row][props.col] === null) {\r\n        const data = { row: props.row, col: props.col, currVal, prevVal };\r\n        const tempPath = JSON.parse(JSON.stringify(path));\r\n        tempPath.push(data);\r\n        setPath(tempPath);\r\n        // console.log(`Address ${props.row},${props.col} changed from ${prevVal} to ${currVal}`)\r\n      }\r\n    }\r\n  }, [value]);\r\n  //this is for original data - that can not be changed\r\n  if (initialValue.length > 0) {\r\n    if (initialValue[address[0]][address[1]] !== null) {\r\n      // console.log(initialValue[address[0]][address[1]],address)\r\n      classList.push(\"disabledBox\");\r\n    }\r\n  }\r\n\r\n  //this adds class to display selected number\r\n  if (selected.toString() === address.toString() && !classList.includes(\"selectedBox\")) {\r\n    classList.push(\"selectedBox\");\r\n  } else {\r\n    classList = classList.filter((elem) => elem !== \"selectedBox\");\r\n  }\r\n  //this adds class to display mistakes you have made compared to solution\r\n  if (check && value[address[0]][address[1]] !== solution[address[0]][address[1]] &&\r\n    value[address[0]][address[1]] !== null &&\r\n    !classList.includes(\"errorBox\") &&\r\n    !classList.includes(\"disabledBox\")) {\r\n    classList.push(\"errorBox\");\r\n  } else {\r\n    classList = classList.filter((elem) => elem !== \"errorBox\");\r\n  }\r\n\r\n  //this adds class to display similar cells\r\n  if (value[address[0]][address[1]] !== null && selected[0] !== undefined) {\r\n    if (value[address[0]][address[1]] === value[selected[0]][selected[1]] && address.toString() !== selected.toString()) {\r\n      classList.push(\"similarBox\");\r\n    } else {\r\n      classList = classList.filter((elem) => elem !== \"similarBox\");\r\n    }\r\n  }\r\n  //this is for validation and adds class to invalid cells\r\n  //row test\r\n  if (\r\n    selected[0] !== undefined &&\r\n    value[selected[0]][selected[1]] !== null &&\r\n    address[0] === selected[0] &&\r\n    address[1] !== selected[1]\r\n  ) {\r\n    if (\r\n      value[address[0]].filter((x) => x === value[selected[0]][selected[1]]).length > 1 &&\r\n      value[address[0]][address[1]] === value[selected[0]][selected[1]]\r\n    ) {\r\n      classList.push(\"dangerBox\");\r\n    } else {\r\n      classList = classList.filter((elem) => elem !== \"dangerBox\");\r\n    }\r\n  }\r\n  //column test\r\n  if (\r\n    selected[0] !== undefined &&\r\n    value[selected[0]][selected[1]] !== null &&\r\n    address[1] === selected[1] &&\r\n    address[0] !== selected[0]\r\n  ) {\r\n    if (\r\n      getCol(value, selected[1]).filter((x) => x === value[selected[0]][selected[1]]).length > 1 &&\r\n      value[address[0]][address[1]] === value[selected[0]][selected[1]]\r\n    ) {\r\n      classList.push(\"dangerBox\");\r\n    } else {\r\n      classList = classList.filter((elem) => elem !== \"dangerBox\");\r\n    }\r\n  }\r\n  //block test\r\n  if (\r\n    selected[0] !== undefined &&\r\n    value[selected[0]][selected[1]] !== null &&\r\n    address[0] !== selected[0] &&\r\n    getBlockAddress(address).toString() === getBlockAddress(selected).toString()\r\n  ) {\r\n    if (\r\n      getBlock(value, getBlockAddress(address)).filter((x) => x === value[address[0]][address[1]]).length > 1 &&\r\n      value[address[0]][address[1]] === value[selected[0]][selected[1]]\r\n    ) {\r\n      classList.push(\"dangerBox\");\r\n    } else {\r\n      classList = classList.filter((elem) => elem !== \"dangerBox\");\r\n    }\r\n  }\r\n  //highlight numbers based on the numberBox selection\r\n  if(highlight!==null && value[address[0]][address[1]]===highlight){\r\n    classList.push(\"similarBox\")\r\n  }\r\n\r\n  return (\r\n    <div onClick={() => setSelected(address)} className={classList.join(\" \")}>\r\n      <div className=\"text1\">{value[address[0]][address[1]]}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SingleBox;\r\n","C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\components\\Solve.jsx",["69","70","71"],"import React, { useContext,useEffect,useState } from \"react\";\r\nimport { FiCheckCircle } from \"react-icons/fi\";\r\nimport { AppContext } from \"../App\";\r\nimport confetti from 'canvas-confetti'\r\n\r\nfunction Solve() {\r\n  const { value,initialValue, getCol, getBlock, getBlockAddress,solution,setSolution, setDisplayError,Popup,timerControls,timeValue } = useContext(AppContext);\r\n  const [solving, setSolving] = useState(false)\r\n  const [counter, setCounter] = useState(1)\r\n  const [solMatrix, setSolMatrix] = useState(Array.from({length: 9},()=> Array.from({length: 9}, () => Array.from(\"123456789\"))))\r\n\r\n  const solveSudoku =() => {\r\n    setSolving(true)\r\n    setSolution(methodA(value))\r\n  };\r\n  useEffect(() => {\r\n    setTimeout(()=>{\r\n      solveSudoku()\r\n    },200)\r\n  },[])\r\n  useEffect(() => {\r\n    if(isFinished(solution)===false && counter<20 && solving===true){\r\n      // console.log(solMatrix,\"Iteration\",counter)\r\n      setSolution(methodA(solution))\r\n      setCounter(counter+1)\r\n    }else if(isFinished(solution)===true){\r\n      console.log(\"Sudoku successfully solved\")\r\n      setSolution(solution)\r\n      console.log(solution)\r\n      setSolving(false)\r\n      setCounter(1)\r\n    }else if(counter===20){\r\n      console.log(\"Maximum iteration reached, Could not solve the sudoku.\")\r\n      console.log(solution)\r\n      setSolving(false)\r\n      setCounter(1)\r\n    }else{\r\n      console.log(\"something's wrong\")\r\n      setSolving(false)\r\n      setCounter(1)\r\n    }\r\n  }, [solution])\r\n\r\n  const isCompleted=(value)=>{\r\n    var remaining=0;\r\n    value.forEach((row,rowIndex)=>{\r\n      row.forEach((col,colIndex)=>{\r\n        if(col!==solution[rowIndex][colIndex]){\r\n          remaining++\r\n        }\r\n      })\r\n    })\r\n    if(remaining===0){\r\n      for(var i=0;i<6;i++){\r\n        setTimeout(()=>confetti({particleCount: 100,startVelocity: 30,spread: 360,origin: {x: Math.random(),y: Math.random() - 0.2}}),500*i)\r\n      }\r\n      timerControls.current.pause()\r\n      setTimeout(() => {\r\n        Popup.create({\r\n          title: 'Congratualtions!!!',\r\n          content: `You finished the sudoku correctly in ${timeValue.current.hour!==0?timeValue.current.hour+\" h\":\"\"} ${timeValue.current.min!==0?timeValue.current.min+\" m\":\"\"} ${timeValue.current.sec+\" s\"}`,\r\n          buttons: {\r\n              left: [{\r\n                  text: 'Cancel',\r\n                  className: 'danger',\r\n                  action: function () {\r\n                      /** Close this popup. Close will always close the current visible one, if one is visible */\r\n                      Popup.close();\r\n                  }\r\n              }],\r\n              right: [{\r\n                text: 'New Sudoku',\r\n                className: 'success',\r\n                action: function () {\r\n                    Popup.alert('Now you will be redirected to new puzzle.');\r\n    \r\n                    /** Close this popup. Close will always close the current visible one, if one is visible */\r\n                    Popup.close();\r\n                }\r\n            }]\r\n            }\r\n        })\r\n      }, 1000);\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    if(!isEmpty(initialValue))\r\n    isCompleted(value)\r\n  }, [value])\r\n  const isEmpty=(matrix)=>{\r\n    var count=0;\r\n    matrix.forEach(row=>{\r\n      row.forEach(col=>{\r\n        if(col===null)count++\r\n      })\r\n    })\r\n    return (count===81)?true:false\r\n  }\r\n  const isFinished = (currentVal) => {\r\n    var currArr = [];\r\n    currentVal.forEach((row) => {\r\n      row.forEach((col) => currArr.push(col));\r\n    });\r\n    currArr = currArr.filter((elem) => elem === null);\r\n    return currArr.length === 0 ? true : false;\r\n  };\r\n  //there are two solution methods and in order to solve sudoku both method needs to be implemented mulltiple times\r\n  //methodA --> checks the cell against row column and blocks and figures which solutions are possible for the cell\r\n  //methodB --> checks the cell solutions based on the other for related blocks\r\n  const methodA =(startPoint) => {\r\n    var temp = JSON.parse(JSON.stringify(startPoint));\r\n    var tempSol = Array(9).fill([]);\r\n    // console.log(solMatrix)\r\n    solMatrix.forEach((row, rowIndex) => {\r\n      var tempSol2 = [];\r\n      row.forEach((col, colIndex) => {\r\n        if (value[rowIndex][colIndex] === null) {\r\n          var filtRow = temp[rowIndex].filter((elem) => elem !== null).filter(elem=>elem!==temp[rowIndex][colIndex]);\r\n          var filtColumn = getCol(temp, colIndex).filter((elem) => elem !== null).filter(elem=>elem!==temp[rowIndex][colIndex]);\r\n          var filtBlock = getBlock(temp, getBlockAddress([rowIndex, colIndex])).filter((elem) => elem !== null).filter(elem=>elem!==temp[rowIndex][colIndex]);\r\n          var tempCell = col.filter((elem) => !filtRow.includes(elem));\r\n          tempCell = tempCell.filter((elem) => !filtColumn.includes(elem));\r\n          tempCell = tempCell.filter((elem) => !filtBlock.includes(elem));\r\n        } else {\r\n          tempCell = [value[rowIndex][colIndex]];\r\n        }\r\n        tempSol2.push(JSON.parse(JSON.stringify(tempCell)));\r\n        if (tempCell.length === 1 && temp[rowIndex][colIndex] === null) {\r\n          temp[rowIndex][colIndex] = tempCell[0];\r\n        }\r\n      });\r\n      tempSol[rowIndex] = JSON.parse(JSON.stringify(tempSol2));\r\n    });\r\n    \r\n    tempSol.forEach((row, rowIndex) =>{\r\n      row.forEach((col, colIndex) => {\r\n        var crossRef = findUniqueFromMatrix(col, tempSol, rowIndex, colIndex);\r\n        if (crossRef !== null && temp[rowIndex][colIndex] === null) {\r\n          temp[rowIndex][colIndex] = crossRef;\r\n          tempSol[rowIndex][colIndex]=[crossRef]\r\n        }\r\n        // console.log(rowIndex,colIndex,findUniqueFromMatrix(col,tempSol,rowIndex,colIndex))\r\n      })\r\n    });\r\n    cleanUpSolMatrix(tempSol)\r\n    return temp;\r\n  };\r\n  const cleanUpSolMatrix=(matrix)=>{\r\n    var tempMatrix=JSON.parse(JSON.stringify(matrix));\r\n    tempMatrix.forEach((row,rowIndex)=>{\r\n      row.forEach((col,colIndex)=>{\r\n        // var col=JSON.parse(JSON.stringify(col))\r\n        const rowArr = tempMatrix[rowIndex];\r\n        const colArr = getCol(tempMatrix, colIndex);\r\n        const blockArr = getBlock(tempMatrix, getBlockAddress([rowIndex, colIndex]));\r\n        // console.log(\"Address\",rowIndex,colIndex)\r\n        col=findUniquePair(col,rowArr)\r\n        col=findUniquePair(col,colArr)\r\n        col=findUniquePair(col,blockArr)\r\n        tempMatrix[rowIndex][colIndex]=col\r\n      })\r\n    })\r\n    // console.log(tempMatrix.map(elem=>elem.map(elem1=>elem1.toString())))\r\n    setSolMatrix(tempMatrix)\r\n    // console.log(solMatrix.map(elem=>elem.map(elem1=>elem1.toString())))\r\n\r\n    // solMatrix=tempMatrix\r\n  }\r\n  const findUniquePair=(valArr,arr1)=>{\r\n    var tempArr=JSON.parse(JSON.stringify(valArr))\r\n    var temp=[]\r\n    arr1.forEach(elem=>{\r\n      if(elem.length===2 && arr1.filter(elem1=>elem1.toString()===elem.toString()).length===2){\r\n        if(elem.toString()!==tempArr.toString()){\r\n          if(!temp.includes(elem[0]) && !temp.includes(elem[1])){\r\n            temp.push(elem[0])\r\n            temp.push(elem[1])\r\n          }\r\n        }\r\n      }\r\n    })\r\n    // console.log(temp)\r\n    tempArr=tempArr.filter(elem2=>!temp.includes(elem2))\r\n    return tempArr\r\n  }\r\n  const findUniqueFromMatrix = (valArr, matrix, row, col) => {\r\n    var tempMatrix = JSON.parse(JSON.stringify(matrix));\r\n    const rowResult = findUniqueFromArr(valArr, tempMatrix[row]);\r\n    const colResult = findUniqueFromArr(valArr, getCol(tempMatrix, col));\r\n    const blockResult = findUniqueFromArr(valArr, getBlock(tempMatrix, getBlockAddress([row, col])));\r\n    // console.log(rowResult?rowResult: colResult ? colResult : blockResult ? blockResult : null,row,col)\r\n    return rowResult ? rowResult : colResult ? colResult : blockResult ? blockResult : null;\r\n  };\r\n  const findUniqueFromArr = (valArr, arr1) => {\r\n    var ret = JSON.parse(JSON.stringify(arr1));\r\n    var temp = [];\r\n    ret.forEach((elem) => elem.forEach((ele) => temp.push(ele)));\r\n    var uniqDigit = [];\r\n    valArr.forEach((elem) => temp.filter((e) => e === elem).length === 1 && uniqDigit.push(elem));\r\n    return uniqDigit.toString();\r\n  };\r\n  const checkSudoku=()=>{\r\n    setDisplayError(true)\r\n    setTimeout(()=>{\r\n      setDisplayError(false)\r\n    },2000)\r\n  }\r\n  return (\r\n    <button className=\"btn\" onClick={checkSudoku}>\r\n      <FiCheckCircle /> Check\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Solve;\r\n","C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\components\\HomePage.jsx",["72"],"C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\components\\Main.jsx",["73"],"C:\\Users\\tanay\\PycharmProjects\\learning_javascript\\sudoku\\src\\components\\DropDown.jsx",[],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":82,"column":7,"nodeType":"80","endLine":82,"endColumn":17,"suggestions":"81"},{"ruleId":"82","severity":1,"message":"83","line":1,"column":26,"nodeType":"84","messageId":"85","endLine":1,"endColumn":35},{"ruleId":"82","severity":1,"message":"86","line":1,"column":37,"nodeType":"84","messageId":"85","endLine":1,"endColumn":43},{"ruleId":"78","severity":1,"message":"87","line":32,"column":6,"nodeType":"80","endLine":32,"endColumn":13,"suggestions":"88"},{"ruleId":"78","severity":1,"message":"89","line":20,"column":5,"nodeType":"80","endLine":20,"endColumn":7,"suggestions":"90"},{"ruleId":"78","severity":1,"message":"91","line":42,"column":6,"nodeType":"80","endLine":42,"endColumn":16,"suggestions":"92"},{"ruleId":"78","severity":1,"message":"93","line":89,"column":6,"nodeType":"80","endLine":89,"endColumn":13,"suggestions":"94"},{"ruleId":"78","severity":1,"message":"95","line":34,"column":6,"nodeType":"80","endLine":34,"endColumn":8,"suggestions":"96"},{"ruleId":"78","severity":1,"message":"97","line":44,"column":6,"nodeType":"80","endLine":44,"endColumn":8,"suggestions":"98"},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'initialValue', 'setSelected', 'setValue', and 'value'. Either include them or remove the dependency array.","ArrayExpression",["101"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","React Hook useEffect has missing dependencies: 'initialValue', 'path', 'prevValue', 'props.col', 'props.row', and 'setPath'. Either include them or remove the dependency array.",["102"],"React Hook useEffect has a missing dependency: 'solveSudoku'. Either include it or remove the dependency array.",["103"],"React Hook useEffect has missing dependencies: 'counter', 'methodA', 'setSolution', and 'solving'. Either include them or remove the dependency array. You can also do a functional update 'setCounter(c => ...)' if you only need 'counter' in the 'setCounter' call.",["104"],"React Hook useEffect has missing dependencies: 'initialValue' and 'isCompleted'. Either include them or remove the dependency array.",["105"],"React Hook useEffect has missing dependencies: 'mode' and 'setInitialValue'. Either include them or remove the dependency array.",["106"],"React Hook useEffect has missing dependencies: 'mode', 'setHighlight', 'setInitialValue', and 'setSelected'. Either include them or remove the dependency array.",["107"],"no-global-assign","no-unsafe-negation",{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},"Update the dependencies array to be: [initialValue, selected, setSelected, setValue, value]",{"range":"122","text":"123"},"Update the dependencies array to be: [initialValue, path, prevValue, props.col, props.row, setPath, value]",{"range":"124","text":"125"},"Update the dependencies array to be: [solveSudoku]",{"range":"126","text":"127"},"Update the dependencies array to be: [counter, methodA, setSolution, solution, solving]",{"range":"128","text":"129"},"Update the dependencies array to be: [initialValue, isCompleted, value]",{"range":"130","text":"131"},"Update the dependencies array to be: [mode, setInitialValue]",{"range":"132","text":"133"},"Update the dependencies array to be: [mode, setHighlight, setInitialValue, setSelected]",{"range":"134","text":"135"},[3863,3873],"[initialValue, selected, setSelected, setValue, value]",[1258,1265],"[initialValue, path, prevValue, props.col, props.row, setPath, value]",[771,773],"[solveSudoku]",[1476,1486],"[counter, methodA, setSolution, solution, solving]",[3163,3170],"[initialValue, isCompleted, value]",[1205,1207],"[mode, setInitialValue]",[1638,1640],"[mode, setHighlight, setInitialValue, setSelected]"]